title: python para desenvolvedores javascript
---
author: Luciano Ratamero
---
body:

<p>logo depois de ter lido <a href="https://dev.to/underdogio/python-for-javascript-developers" target="_blank">esse post</a>, eu percebi que as poucas dificuldades que tive durante minha adaptação de javascript pra python (há anos) nunca foram ensinadas pra mim de uma maneira clara.</p><p>apesar de ambas as linguagens serem razoavelmente parecidas, achei interessante a ideia, então aqui vão algumas diferenças pra se ter em mente na hora de virar a chave. algumas são de Mario Pabon, o autor do post original, e algumas coisas são minhas mesmo. :)</p><p>ah, só um detalhe: aqui vamos supor que você está usando python 3, sim? bem, vamos lá!</p>

<hr>

pra quem quiser pular pra uma parte em específico, aqui vai:
<ul>
    <li>
        <a href="#sintaxe">sintaxe</a>
        <ul>
            <li><a href="#declaração-de-variáveis">declaração de variáveis</a></li>
            <li><a href="#blocos">blocos</a></li>
            <li><a href="#controle-de-fluxo">controle de fluxo</a></li>
        </ul>
    </li>
    <li>
        <a href="#tipos">tipos</a>
        <ul>
            <li><a href="#números">números</a></li>
            <li><a href="#listas">listas</a></li>
            <li><a href="#strings">strings</a></li>
            <li><a href="#dicionários">dicionários</a></li>
            <li><a href="#None"><code>None</code></a></li>
            <li><a href="#funções">funções</a></li>
        </ul>
    </li>
    <li><a href="#módulos">módulos</a></li>
    <li><a href="#poo">programação orientada a objetos</a></li>
</ul>

<h2 id="sintaxe">sintaxe</h2>

<h3 id="declaração-de-variáveis">declaração de variáveis</h3>

para ambas as linguagens, declarar variáveis é simples.
<p><strong>javascript</strong></p>
    `#!js var x = 3;`
<p><strong>python</strong></p>
    `#!python x = 3`

mais tarde vamos falar de tipos, que fazem toda a diferença entre as linguagens. só vamos deixar clara, por enquanto, uma grande diferença: **variáveis em python sempre pertencem ao contexto do seu bloco**.

<h3 id="blocos">blocos</h3>

python tende a sempre ser mais estrito do que javascript. em python, não seguir a <span class="tip" title="<strong>indentação</strong>: recuo de um texto em relação a sua margem. ou seja, o número de espaços ou tabs antes de uma linha de código.">indentação do código</span> pode fazer com que ele nem rode. isso se dá porque o python usa a indentação para definir blocos, no lugar das chaves do javascript.

<p><strong>blocos em javascript</strong></p>

    :::js
    function exampleFunction () {
      // isso é um bloco, com um contexto pras variáveis
      var a = 5;
    }

<p><strong>blocos em python</strong></p>

    :::python
    def example_function():
        # isso também é, também com seu próprio escopo
        # que é definido pelo que tá no mesmo nível de indentação
        x = 5
        print(x)

se a linha do <code>print(x)</code> tivesse mais um ou menos um espaço antes da chamada da função, o interpretador do python levantaria uma exceção <code>IndentationError</code>, porque a diferença de espaços criaria um bloco inválido.

outro possível problema causado pelo mau uso de indentação em python é o de escopo.

    :::python 
    x = "fora"
    # no escopo de fora, x = "fora"
    def example_function():
        x = "dentro"
        # no de dentro, x = "dentro"
        print(x)
        # retornaria "dentro"
    print(x)
    # retornaria "fora"

<h3 id="controle-de-fluxo">controle de fluxo</h3>

<code>if...else</code>, <code>while</code> e <code>for</code> em python são razoavelmente parecidos com javascript.

### if...else
<p><strong>javascript</strong></p>
    
    :::js
    if (x > 1) {
        console.log('oi');
    } else if (!x > 1) {
        console.log('io');
    } else {
        console.log('ioi');
    }

<p><strong>python</strong></p>

    :::python 
    if x > 1:
        print('oi')
    elif not x > 1:
        # 'elif' em vez de 'else if', 'not' em vez de '!'
        print('io')
    else:
        print('ioi')

### while
<p><strong>javascript</strong></p>

    :::js
    while (x < 3){
      x++;
    }

<p><strong>python</strong></p>

    :::python 
    while x < 3:
        x += 1

### for

em python, ao <span class="tip" title="<strong>iterar:</strong> pegar ítem a ítem de uma lista e executar alguma ação, geralmente sobre o próprio ítem.">iterar</span> sobre uma lista, não precisamos declarar o índice ou resgatar o objeto internamente - o objeto da vez já está implícito.
<p><strong>javascript</strong></p>

    :::js
    var lista = [1, 2, 3];
    for (var i=0; i < lista.length; i++){
      var item = lista[i];
      console.log(item); // 1; 2; 3
    }

<p><strong>python</strong></p>

    :::python 
    lista = [1, 2, 3]
    for item in lista: # o item da vez ficará na variável 'item'
        print(item) # 1; 2; 3

o javascript até aceita a sintaxe de <code>for (item in lista)</code>, mas se comporta de maneira diferente, colocando na variável <code>item</code> o valor do contador do loop.

<h2 id="tipos">tipos</h2>

os tipos em python são razoavelmente parecidos ao de javascript, já que você não precisa declarar os tipos para cada variável na hora da declaração (como se faz com java ou C#, por exemplo).

a grande diferença é como os tipos interagem, já que várias operações permitidas em javascript não são em python. python prefere levantar um erro em vez de fazer uma operação entre tipos que pode gerar um dado errado.

um dos exemplos mais clássicos é o da soma de números com strings:
<p><strong>javascript</strong></p>
    
    :::js
    var a = 5; // número inteiro;
    var b = "5"; // uma string que contém o número 5
    a + b // retornará a string "55"

<p><strong>python</strong></p>

    :::python 
    a = 5 # número inteiro
    b = "5" # uma string que contém o número 5
    a + b # 'TypeError', já que não se pode somar tipos diferentes
    # em python, devemos transformar o número em string
    # ou a string em número
    str(a) + b # string "55"
    a + int(b) # inteiro 10

já que tiramos essa dúvida da reta, vou dar um apanhado básico dos tipos em python.

<h3 id="números">números</h3>

ao contário de javascript, python tem vários tipos diferentes para diferentes números.

- inteiros (integer): <code>1</code>, <code>2</code>, <code>3</code>
- ponto flutuante (float): <code>4.20</code>, <code>4e420</code>
- números complexos: <code>4 + 20j</code>
- booleanos (boolean): <code>True</code>, <code>False</code>

você pode fazer as mesmas operações em ambas as linguagens, como, por exemplo, soma, subtração, divisão, multiplicação e potenciação.

<h3 id="listas">listas</h3>

listas em python são bem parecidas com as de javascript, com alguns adereços a mais. elas podem conter uma mistura de tipos:

    :::python 
    [4, "2", [0, "zero"]]

há também uma sintaxe especial para pegar partes de uma lista:

    :::python 
    lista = [1, 2, 3, 4, 5]
    lista[0:2] # 1, 2, 3
    lista[3:] # 4, 5
    lista[2, -2] # 3, 4
    # se aceitam índices negativos, pegando do final da lista


e algumas funções e métodos úteis:

    :::python 
    len([1, 2, 3]) # 3
    [1, 2, 3].reverse() # [3, 2, 1]
    [1, 2].append(3) # [1, 2, 3], igual ao 'push' do js

para concatenar listas, é só somá-las:

    :::python 
    # [1, 2, 3, 4]
    [1, 2] + [3, 4]

pra fechar, temos em python o que chamam de <code>list comprehension</code>. é uma forma de criar listas dinamicamente.

    :::python 
    lista = [1, 2, 3, 4]
    maiores_que_2 = [numero for numero in lista if numero > 2]
    # maiores_que_2 é agora [3, 4]

<h3 id="strings">strings</h3>

strings em python são praticamente iguais às de javascript. você pode acessar cada caractere individualmente, mas só pode alterar o conteúdo ao reassinalar a variável.

    :::python 
    nome = 'Luciano'
    print(nome[0]) # L
    nome[0] = 'D' # TypeError

<h3 id="dicionários">dicionários</h3>

dicionários são listas associativas em python, muito parecidos com objetos em javascript. eles são declarados praticamente da mesma forma.

    :::python 
    pessoa = {
        'nome': 'Luciano',
        'idade': 27
    }
    print(pessoa['nome']) # Luciano
    print(pessoa['gênero']) # KeyError, gênero não foi declarado
    
já que em python nós preferimos levantar erros em vez de falhar silenciosamente, temos um método padrão dos dicionários para resgatar valores default no caso de eles não terem sido declarados:

    :::python 
    pessoa.get('gênero', 'não-binário')
    # não achamos a chave "gênero", retornamos 'não-binário'

<h3 id="None">None</h3>

<code>None</code> é equivalente a <code>null</code> em javascript. isso significa que <code>None</code> representa a ausência de um valor e é avaliado como <code>false</code>.

detalhe: não há par para <code>undefined</code> em python, já que tentar acessar algo não definido em python levanta uma exceção <code>NameError</code>.

<h3 id="funções">funções</h3>

assim como em javascript, funções também são objetos em python. isso significa que você pode passar funções como argumentos/callbacks ou até assinalar propriedades pra funções.

    :::python 
    def func_tainha(a, other_func):
        print(a)
        other_func()
    def another_func():
        print('marilene')
    func_tainha('olá', another_func)
    # olá
    # marilene
    func_tainha.vinho = 'sinuelo'
    print(func_tainha.vinho)
    # sinuelo

<h2 id="módulos">módulos</h2>

não quero falar sobre ES6 aqui, mas os módulos (pacotes) em python são bem parecidos (em sintaxe) com os módulos em javascript ES6.

#### definindo um módulo

ao contrário de ES6, em que você tem que declarar o que você tá exportando pro seu módulo, em python você sõ precisa criar um arquivo <code>.py</code> e suas punções/classes/oquefor estão prontas pra serem importadas. basta que, na mesma pasta do seu módulo, você coloque um arquivo `__init__.py` pra que o interpretador python reconheça o módulo

    :::python 
    # qualquercoisa/qualquercoisa.py
    def dizer_quelquercoisa():
      print('qualquercoisa')

-------

    :::python 
    # qualquercoisa/__init__.py
    # pode ser vazio mesmo

-------

    :::python 
    # qualquercoisa/lala.py
    import qualquercoisa
    # importando o módulo inteiro
    qualquercoisa.dizer_quelquercoisa()
    # qualquercoisa
    from qualquercoisa import dizer_quelquercoisa
    # importando apenas a função 'dizer_quelquercoisa'
    dizer_quelquercoisa()
    # 'qualquercoisa'

ah, e pra instalar pacotes disponibilizados pela comunidade, tipo <code>npm</code>, você usa o <code>pip</code>.

`#!sh pip install django`

<h2 id="poo">programação orientada a objetos</h2>

em python, assim como ES6, há suporte a classes e herança entre objetos. isso é diferente da herança baseada em <code>prototypes</code> clássica do javascript.

    :::python 
    # você pode definir uma classe que representa qualquer animal
    class Animal:
        # qualquer variável definida aqui será uma propriedade da classe
        idade_inicial = 1
        def __init__(self, nome, especie='humano'):
            # aqui, declaramos que, ao criar um animal, podemos passar um nome e espécie pra ele
            # se não passarmos uma espécie, por padrão, ela será 'humano'
            # 'self' se comporta parecido com o 'this', mas sem toda a confusão de escopo
            self.nome = nome
            self.especie = especie
            self.idade = self.idade_inicial
        def comemorar_aniversario(self):
            # ao comemorar aniversário, acrescentamos 1 à idade
            self.idade += 1
        def falar(self):
            # se for um humano, ele fala besteira
            if self.especie == 'humano':
                return 'blablablawhiskassachê'
            
desse jeito, se inicializarmos um humano chamado Jorge e comemorarmos seu aniversário, teremos o seguinte:

    :::python 
    jorge = Animal('Jorge')
    jorge.idade
    # 1
    jorge.comemorar_aniversario()
    jorge.idade
    # 2
    jorge.falar()
    # blablablawhiskassachê

<h3 id="herança">herança</h3>

tendo como base nossa classe de animal, podemos, por exemplo, termos uma subclasse de animal chamada <code>Girafa</code>:

    :::python 
    class Girafa(Animal):
        '''
        ao passar Animal entre parênteses, herdamos tudo de Animal
        aqui, declaramos que girafas são da espécie 'girafa'
        e que não precisam de nome.
        pra isso, sobrescrevemos o __init__, que inicializa uma girafa.
        '''
        def __init__(self):
            self.idade = self.idade_inicial
            self.especie = 'girafa'

assim, se inicializarmos uma girafa...

    :::python 
    girafa_nova = Girafa()
    # não precisamos mais passar nome
    girafa.idade
    # 1
    girafa.comemorar_aniversario()
    girafa.idade
    # 2
    girafa.falar()
    #
    # isso mesmo, girafa não fala, então se mandarmos ela falar, não sai nada :)
    
<hr/>

é claro que tem MUITO mais sobre python do que só isso, então se tiverem qualquer dúvida ou acharem que algo poderia ser explicado melhor, só falar nos comentários.

e lembrem que a melhor forma de aprender uma linguagem é meter a mão na massa e fazer um projetinho! se não souberem por onde começar, eu recomendo fortemente o [tutorial das pyladies do Django Girls](https://tutorial.djangogirls.org/pt/), mas se não quiser aprender com desenvolvimento web, tem sempre o [python para zumbis](https://www.pycursos.com/python-para-zumbis/) do querido e fofíssimo Masanori.

abraços, e até a próxima!
---
pub_date: 2017-06-08
---
summary: <p>logo depois de ter lido <a href="https://dev.to/underdogio/python-for-javascript-developers" target="_blank">esse post</a>, eu percebi que as poucas dificuldades que tive durante minha adaptação de javascript pra python (há anos) nunca foram ensinadas pra mim de uma maneira clara.</p><p>apesar de ambas as linguagens serem razoavelmente parecidas, achei interessante a ideia, então aqui vão algumas diferenças pra se ter em mente na hora de virar a chave. algumas são de Mario Pabon, o autor do post original, e algumas coisas são minhas mesmo. :)</p><p>ah, só um detalhe: aqui vamos supor que você está usando python 3, sim? bem, vamos lá!</p>
---
tags: python, javascript, frontend, dicas, tutorial
