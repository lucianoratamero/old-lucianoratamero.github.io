title: Lektor: gerador de sites estáticos escrito em Python
---
author: Luciano Ratamero
---
body:

<div class="image-wrapper">
    <a target="_blank" href="https://getlektor.com/"><img src="https://lucianoratamero.github.io/img/cover-lektor.png"></a>
</div>

*edit: esse blog agora funciona com django_apistar como backend e react + parcel no front*

vamos começar com um post um pouco meta: sobre como eu fiz esse blog usando Python e [Lektor](https://getlektor.com/), um gerador de sites estáticos escrito em Python. por que usar uma ferramenta em Python em vez de JavaScript? pra poder falar sobre ele pro pessoal da [PythOnRio](https://www.facebook.com/pythonrio/), claro. e porque foi a melhor ferramenta que usei pra esse propósito até hoje. mas isso é só um detalhe. enfim, vamos começar do começo: o que raios é Lektor?
<hr>

### o que raios é Lektor?

bem, como eu disse, o Lektor é um gerador de sites estáticos escrito em Python, ou seja, um gerador de htmls. basicamente, ele pega **conteúdo**, o formata em **modelos** e os aplica a **templates** pré-definidos. tudo isso pra poder te dar a liberdade de construir o conteúdo da forma que quiser, bem categorizado e organizado, e transformá-lo em um site estático sem se preocupar com copiar e colar html, css e javascript.

ele é perfeito pra quem quer algo entre a construção manual de páginas em html puro, mas não precisa de uma estrutura rebuscada nem de uma aplicação e servidor necessários a um [CMS](https://pt.wikipedia.org/wiki/Sistema_de_gerenciamento_de_conte%C3%BAdo). dessa forma, podemos ter um site com uma estrutura complexa em html puro, deixando o computador ter o trabalho de montar o site pra gente. **detalhe: esse blog é feito com Lektor ;)**

### ok, como eu começo a ver qual é?

como todo bom pacote Python, basta instalar via pip:

<pre><code>pip install lektor</code></pre>

sempre bom lembrar que o recomendável é instalar dentro de uma [virtualenv](http://docs.python-guide.org/en/latest/dev/virtualenvs/).

com o Lektor no seu path, é só dar um:

<pre><code>lektor quickstart</code></pre>

ele vai fazer uma série de perguntas, como *nome do projeto*, *autor*, *pasta destino do projeto*, essas coisas. com isso, temos um projeto pronto pra funcionar. só precisamos saber como funciona, certo?

### como funciona?

como eu disse anteriormente, ele transforma uma estrutura própria dele em html puro. vou destrinchar então cada parte dele pra a gente entender melhor.

#### estrutura de diretórios

o <code>quickstart</code> do Lektor gerou algo similar à seguinte estrutura de diretórios:

<div class="image-wrapper"><img src="https://lucianoratamero.github.io/img/lektor-tree.jpg"></div>

temos três pastas centrais aqui: **content**, **models** e **templates**. vou explicar cada uma com calma.

#### ./content

<div class="image-wrapper"><a target="_blank" href="https://lucianoratamero.github.io/img/content.jpg"><img src="https://lucianoratamero.github.io/img/content.jpg"></a></div>

aqui está o conteúdo do seu site. é um ponto interessante do Lektor: ele não usa um banco de dados pra guardar os dados do seu site, **é tudo em estrutura de pastas e arquivos**. assim, você automaticamente tem uma visão geral de todo seu conteúdo e tudo eternamente organizado - fora o fato de que, bem, você não precisa de um banco de dados! quer criar uma página nova? é só criar uma pasta com o nome da página e um arquivo chamado <code>content.lr</code> dentro, com o conteúdo em si.

#### ./models

<div class="image-wrapper"><a target="_blank" href="https://lucianoratamero.github.io/img/models.jpg"><img src="https://lucianoratamero.github.io/img/models.jpg"></a></div>

se vocês notaram na parte do **content**, ele tem subdivisões: *title* e *body*. essas são características do **modelo de página**. isso aí: *você pode criar tipos de conteúdo diferentes*, e eles podem interagir entre si. por exemplo, o modelo de *blog-post* pertence ao modelo de *blog*. isso permite um maior nível de customização na hora de formatar seu conteúdo nos **templates**.

#### ./templates

<div class="image-wrapper"><a target="_blank" href="https://lucianoratamero.github.io/img/templates.jpg"><img src="https://lucianoratamero.github.io/img/templates.jpg"></a></div>

se você já trabalhou com Django ou Jinja, ou até Angular, vai estar em casa aqui. **templates** são representações html dos **modelos** preenchidos com **conteúdos**. podemos ver que nosso template de página extende o template de layout (que é o que contém todo o html repetido em todas as páginas) e substitui locais específicos com dados específicos, definidos no conteúdo criado.

### ok, ok, mas eu não faço idéia de como tá ficando!

caaalma. abre o terminal de novo, faz favor. digita aí.

<pre><code>lektor server</code></pre>

então, agora você pode visitar seu site e ver o que tá fazendo acessando <code>localhost:5000</code>. mas aí vem a confusão: *o Lektor não gera html puro? que negócio é esse de servidor?* então, o que ele tá fazendo é somente detectando mudanças nos arquivos, gerando os htmls de novo e servindo esse html localmente. não tem servidor nenhum (tem, mas só é usado pra isso), é só uma conveniência pra que você consiga trabalhar melhor.

caso você queira ver exatamente o que ele está gerando, use o comando <code>lektor build</code>. ele te dará a pasta na qual ele tá colocando os arquivos gerados. é só abrir os htmls no navegador que você verá que tá tudo perfeito, bizarramente mágico. se quiser mudar a pasta de destino dos arquivos gerados, adicione a flag <code>--output-path [caminho da pasta]</code> que ele vai **sobrescrever** o conteúdo da pasta com o código gerado. então **tenha cuidado** pra não sobrescrever uma pasta que seja valiosa pra você. sugiro criar uma pasta no próprio projeto pra que seja sempre o destino.

**sério, lê de novo o último parágrafo. atentamente. vai por mim.**

### beleza, achei legal, mas queria entender um pouco melhor!

então, o código desse blog aqui tá num repositório aberto no github: [lucianoratamero/blog](https://github.com/lucianoratamero/blog). claro que esse blog tem algumas sacanageiras a mais, mas dá pra entender tudo se você pegar esse post e comparar ao código. :)

também tem os [slides da minha palestra na PythOnRio](http://lucianoratamero.github.io/talks/2016/fazendo%20seu%20site%20-%20blog%20no%20Github%20Pages%20com%20Python%20e%20Lektor/). e [eu](http://facebook.com/lucianoratamero), caso queira tirar uma dúvida. pode perguntar sem medo! pode mandar ver nos comentários também, que eu recebo notificação (recebo mesmo!).

ficaram algumas features interessantes faltando, como a interface administrativa, a gerência de anexos, as ferramentas de deploy, os plugins e o uso com o [github pages](http://pages.github.io), mas acho que pode ficar pra outro post. esse já tá meio grande demais. então até mais, vejo vocês outro dia o/
---
pub_date: 2016-02-02
---
tags: lektor, site estático, gerador, Luciano Ratamero, Python, Python Rio
---
summary:

<div class="image-wrapper">
    <a target="_blank" href="https://getlektor.com/"><img src="https://lucianoratamero.github.io/img/cover-lektor.png"></a>
</div>

*edit: esse blog agora funciona com django_apistar como backend e react + parcel no front*

vamos começar com um post um pouco meta: sobre como eu fiz esse blog usando Python e [Lektor](https://getlektor.com/), um gerador de sites estáticos escrito em Python. por que usar uma ferramenta em Python em vez de JavaScript? pra poder falar sobre ele pro pessoal da [PythOnRio](https://www.facebook.com/pythonrio/), claro. e porque foi a melhor ferramenta que usei pra esse propósito até hoje. mas isso é só um detalhe. enfim, vamos começar do começo: o que raios é Lektor?
